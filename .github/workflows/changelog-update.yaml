name: Update Changelog
# Updates Changelog.

on:
  push:
    branches:
      - main

jobs:
  update-changelog-and-tag:
    runs-on: ubuntu-latest
    if: always() && !contains(github.event.commits[0].message, '[publish-only]')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.LEAD_ENGINEER_TOKEN }}
          fetch-depth: '0' # Needed for git diff-tree to compare

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip3.9-${{ hashFiles('.github/workflows/changelog-update.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip3.9-

      - name: If a stack directory and changelog is updated set the needed outputs
        run: '.github/scripts/check-changelog-requirements.sh'
        shell: bash

      - name: Set update type from changelog
        if: ${{ env.UPDATE_CHANGELOG }}
        run: |
          echo UNRELEASED_CHANGES=$(grep "^## \[Unreleased\]" $CHANGELOG_FILE)
          UNRELEASED_CHANGES=$(grep "^## \[Unreleased\]" $CHANGELOG_FILE)

          if [ -z "$UNRELEASED_CHANGES" ] # If UNRELEASED_CHANGES is empty
          then
            echo "$CHANGELOG_FILE doesn't contain unreleased changes"
            exit 1
          else
            echo "$CHANGELOG_FILE contains unreleased changes: $UNRELEASED_CHANGES"
          fi

          UPDATE_TYPE_REGEX='^## \[Unreleased\] - (MAJOR|MINOR|PATCH)' # Capture MAJOR|MINOR|PATCH in group 1
          if [[ $UNRELEASED_CHANGES =~ $UPDATE_TYPE_REGEX ]]
          then
            UPDATE_TYPE="${BASH_REMATCH[1]}" # Set UPDATE_TYPE to group 1 content
            echo "$CHANGELOG_FILE contains update type ${UPDATE_TYPE}"
          else
            echo "$CHANGELOG_FILE doesn't contain update type"
            exit 1
          fi
          echo "UPDATE_TYPE=$UPDATE_TYPE" >> $GITHUB_ENV
        shell: bash

       # Using Lead Engineer's account here (not possible to alter GITHUB_TOKEN to include write permissions- project policy)
      - name: setup git config
        if: ${{ env.UPDATE_CHANGELOG }}
        run: |
          git config user.name "Dev Platform Release"
          git config user.email "zeeshan.javed@digital.cabinet-office.gov.uk"

      - name: Get current version
        if: ${{ env.UPDATE_CHANGELOG }}
        run: |
          CURRENT_VERSION=$(grep -oP '\[v\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | sort -rV | head -n1)
          echo $CURRENT_VERSION
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Set new env.VERSION using current version and update type
        if: ${{ env.UPDATE_CHANGELOG }}
        run: '.github/scripts/version_increment.sh ${{ env.UPDATE_TYPE }} ${{ env.CURRENT_VERSION }}'
        shell: bash

      - name: Update Changelog with new version
        if: ${{ env.UPDATE_CHANGELOG }}
        run:  |
          echo "Changes found in ${{ env.CHANGELOG_FILE }}, updating version to ${{ env.VERSION }}"
          sed -i "s/^## \[Unreleased\].*/## \[${{ env.VERSION }}\] \- $(date '+%Y-%m-%d')/" ${{ env.CHANGELOG_FILE }}
        shell: bash

      # Commit and push the updated CHANGELOG.md
      - name: commit and tag
        if: ${{ env.UPDATE_CHANGELOG }}
        run: |
          # Stage the file, commit and push
          tag="${{ env.VERSION }}"
          git add ${{ env.CHANGELOG_FILE }}
          git commit -m "Publishing: $tag, [publish-only]"
          git tag -a "$tag" -m "$tag"
          git push --atomic origin main "$tag"

  publish:
    if: |
      contains(github.event.commits[0].message, '[publish-only]')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip3.9-${{ hashFiles('.github/workflows/changelog-update.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip3.9-